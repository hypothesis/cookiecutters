{% if cookiecutter._directory == 'pypackage' %}
[metadata]
name = {{ cookiecutter.slug }}
description = {{ cookiecutter.short_description }}
long_description = file: README.md
long_description_content_type = text/markdown
url = {{ cookiecutter.__github_url }}
project_urls =
    Bug Tracker = {{ cookiecutter.__github_url }}/issues
    Changelog = {{ cookiecutter.__github_url }}/releases
classifiers =
    Programming Language :: Python :: 3
    License :: OSI Approved :: BSD License
    Intended Audience :: Developers

[options]
package_dir =
    = src
packages = find:
python_requires = >={{ python_versions()|oldest|pyformat(PyFormats.MAJOR_DOT_MINOR_FMT) }}
install_requires =
    importlib_metadata;python_version<"3.8."
{% if include_exists("setuptools/install_requires") %}
  {{- include("setuptools/install_requires", indent=4) -}}
{% endif %}

[options.packages.find]
where = src

[options.entry_points]
{% if include_exists("setuptools/console_scripts") %}
console_scripts =
{{ include("setuptools/console_scripts", indent=4) -}}
{% elif cookiecutter.get("console_script") == "yes" %}
console_scripts =
    {{ cookiecutter.__entry_point }} = {{ cookiecutter.package_name }}.cli:cli
{% endif %}
{% if include_exists("setuptools/entry_points") %}
    {{- include("setuptools/entry_points") -}}
{% endif %}

{% endif %}
[pycodestyle]
ignore =
    # Disable pycodestyle errors and warnings that we don't care about because
    # Black formats our code for us.
    E203,  # Whitespace before ':',
    E231,  # Missing whitespace after ',',
    E501,  # Line too long,
    W503,  # Line break before binary operator,

    # "Comparison to None should be 'if cond is None:'.
    # PyLint finds these so we don't need pycodestyle to.
    E711,

    # Bare except. PyLint finds these for us so we don't need pycodestyle to.
    E722,
{% if include_exists("pycodestyle/ignores") %}

    {{- include("pycodestyle/ignores", indent=4) -}}
{% endif %}
{% if include_exists("setup.cfg") %}

{{ include("setup.cfg") -}}
{% endif %}
