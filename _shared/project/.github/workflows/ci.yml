name: CI
on:
  push:
  workflow_dispatch:
  workflow_call:
  {% if cookiecutter._directory == 'pypackage' %}
  schedule:
  - cron: '0 1 * * *'
  {% endif %}
jobs:
  {% for job in ['format', 'lint', 'tests', 'coverage', 'functests'] %}
  {{ job|capitalize }}:
    {% if job == 'coverage' %}
    needs: tests
    {% endif %}
    runs-on: ubuntu-latest
    {% if job in ["tests", "functests"] and has_services() %}
    services:
      {% if cookiecutter.get("db") == "yes" %}
      postgres:
        image: postgres:{{ cookiecutter.get("__postgres_version", "11.5-alpine") }}
        ports:
        - {{ cookiecutter['__db_port'] }}:5432
      {% endif %}
      {% if include_exists(".github/workflows/ci/services.yml") %}
        {{- include(".github/workflows/ci/services.yml", indent=6) -}}
      {% endif %}
    {% endif %}
    {% if job in ["tests", "functests"] and cookiecutter.get("db") == "yes" %}
    env:
      TEST_DATABASE_URL: postgresql://postgres@localhost:{{ cookiecutter['__db_port'] }}/{{ cookiecutter.package_name }}_test
    {% endif %}
    {% if cookiecutter._directory == 'pypackage' and (job == 'tests' or job == 'functests') %}
    strategy:
      matrix:
        python-version: [{{ python_versions()|pyformat(PyFormats.MAJOR_DOT_MINOR_FMT)|quote("'") }}]
    {% endif %}
    {% if cookiecutter._directory == 'pypackage' and job == 'tests' %}
    name: Unit tests with Python {% raw %}${{ matrix.python-version }}{% endraw +%}
    {% elif cookiecutter._directory == 'pypackage' and job == 'functests' %}
    name: Functional tests with Python {% raw %}${{ matrix.python-version }}{% endraw +%}
    {% endif %}
    steps:
      - uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          {% if cookiecutter._directory == 'pypackage' and (job == 'tests' or job == 'functests') %}
          python-version: {% raw %}${{ matrix.python-version }}{% endraw +%}
          {% else %}
          python-version: '{{ python_versions()|first|pyformat(PyFormats.MAJOR_DOT_MINOR_FMT) }}'
          {% endif %}
      {% if cookiecutter._directory in ['pyapp', 'pyramid-app'] %}
      - name: Cache the .tox dir
        uses: actions/cache@v3
        with:
          path: .tox
          key: {{ job }}-{% raw %}${{ runner.os }}-tox-${{ hashFiles('tox.ini') }}-${{ hashFiles('requirements/*') }}{% endraw +%}
          restore-keys: |
            {{ job }}-{% raw %}${{ runner.os }}-tox-{% endraw +%}
      {% endif %}
      {% if job in ["tests", "functests"] and cookiecutter.get("db") == "yes" %}
      - name: Create test database
        run: psql -U postgres -h localhost -p {{ cookiecutter['__db_port'] }} -c 'CREATE DATABASE {{ cookiecutter.package_name }}_test'
      {% endif %}
      {% if cookiecutter.get("frontend") == "yes" %}
      - run: yarn install --frozen-lockfile
      - run: yarn build
      {% endif %}
      {% if job == 'coverage' %}
      - name: Download coverage files
        uses: actions/download-artifact@v3
        with:
          name: coverage
      {% endif %}
      - run: python -m pip install 'tox<4'
      {% if job == 'format' %}
      - run: tox -e checkformatting
      {% else %}
      - run: tox -e {{ job }}
      {% endif %}
      {% if job == 'tests' %}
      - name: Upload coverage file
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: .coverage.*
      {% endif %}
  {% endfor %}
  {% if cookiecutter.get("frontend") == "yes" %}
  Frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Cache the node_modules dir
      uses: actions/cache@v3
      with:
        path: node_modules
        key: {% raw %}${{ runner.os }}-node_modules-${{ hashFiles('yarn.lock') }}{% endraw +%}
    - name: Install
      run: yarn install --frozen-lockfile
    - name: Format
      run: make frontend-checkformatting
    - name: Lint
      run: make frontend-lint
    - name: Test
      run: make frontend-test
  {% endif %}
  {{- include(".github/workflows/ci.yml", indent=2) -}}
