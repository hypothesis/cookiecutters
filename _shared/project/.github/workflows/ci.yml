name: CI
on:
  push:
    paths-ignore:
      - '.cookiecutter/*'
      - '.github/dependabot.yml'
{% if include_exists(".github/workflows/environments.json") %}
      - '.github/workflows/deploy.yml'
      - '.github/workflows/redeploy.yml'
{% endif %}
{% if cookiecutter._directory in ['pyapp', 'pyramid-app'] %}
      - 'bin/logger'
{% endif %}
      - 'bin/make_python'
      - 'bin/make_template'
{% if cookiecutter._directory == 'pyramid-app' %}
      - 'conf/development.ini'
      - 'conf/production.ini'
{% endif %}
{% if cookiecutter._directory in ['pyapp', 'pyramid-app'] %}
      - 'conf/supervisord*.conf'
{% endif %}
      - 'docs/*'
{% if cookiecutter._directory in ['pyapp', 'pyramid-app'] %}
      - 'requirements/*.in'
      - 'requirements/dev.txt'
{% endif %}
{% if cookiecutter.get("docker") == "yes" %}
      - '.docker.env'
{% endif %}
      - '**/.gitignore'
{% if cookiecutter.get("docker") == "yes" %}
      - 'Dockerfile'
{% endif %}
      - 'LICENSE'
      - '*.md'
{% if has_services() %}
      - 'docker-compose.yml'
{% endif %}
  workflow_dispatch:
  workflow_call:
  schedule:
  - cron: '0 1 * * *'
jobs:
  {% for job in ['format', 'lint', 'typecheck', 'tests', 'coverage', 'functests'] %}
  {{ job|capitalize }}:
    {% if job == 'coverage' %}
    needs: tests
    {% endif %}
    runs-on: {{ cookiecutter["__" + job + "_runner_type"] }}
    {% if job in ["tests", "functests"] and has_services() %}
    services:
      {% if cookiecutter.get("postgres") == "yes" %}
      postgres:
        image: postgres:{{ cookiecutter.get("__postgres_version", "15.3-alpine") }}
        ports:
        - {{ cookiecutter['__postgres_port'] }}:5432
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      {% endif %}
      {% if include_exists(".github/workflows/ci/services.yml") %}
        {{- include(".github/workflows/ci/services.yml", indent=6) -}}
      {% endif %}
    {% endif %}
    {% if cookiecutter._directory == 'pypackage' and (job == 'tests' or job == 'functests') %}
    strategy:
      matrix:
        python-version: [{{ python_versions()|pyformat(PyFormats.MAJOR_DOT_MINOR_FMT)|quote("'") }}]
    {% endif %}
    {% if cookiecutter._directory == 'pypackage' and job == 'tests' %}
    name: Unit tests with Python {% raw %}${{ matrix.python-version }}{% endraw +%}
    {% elif cookiecutter._directory == 'pypackage' and job == 'functests' %}
    name: Functional tests with Python {% raw %}${{ matrix.python-version }}{% endraw +%}
    {% endif %}
    steps:
      - uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          {% if cookiecutter._directory == 'pypackage' and (job == 'tests' or job == 'functests') %}
          python-version: {% raw %}${{ matrix.python-version }}{% endraw +%}
          {% else %}
          python-version: '{{ python_versions()|first|pyformat(PyFormats.MAJOR_DOT_MINOR_FMT) }}'
          {% endif %}
      {% if cookiecutter._directory in ['pyapp', 'pyramid-app'] %}
      - name: Cache the .tox dir
        uses: actions/cache@v3
        with:
          path: .tox
          key: {{ job }}-{% raw %}${{ runner.os }}-tox-${{ hashFiles('tox.ini') }}-${{ hashFiles('requirements/*') }}{% endraw +%}
          restore-keys: |
            {{ job }}-{% raw %}${{ runner.os }}-tox-{% endraw +%}
      {% endif %}
      {% if job in ["tests", "functests"] and cookiecutter.get("postgres") == "yes" %}
      - name: Create test database
        run: psql -U postgres -h localhost -p {{ cookiecutter['__postgres_port'] }} -c 'CREATE DATABASE {{ cookiecutter.package_name }}_{{ job }}'
      {% endif %}
      {% if cookiecutter.get("frontend") == "yes" and job in ["tests", "functests"] %}
      - run: yarn install --frozen-lockfile
      - run: yarn build
      {% endif %}
      {% if job == 'coverage' %}
      - name: Download coverage files
        uses: actions/download-artifact@v3
        with:
          name: coverage
      {% endif %}
      - run: python -m pip install 'tox<4'
      {% if job == 'format' %}
      - run: tox -e checkformatting
      {% else %}
      - run: tox -e {{ job }}
      {% if job == 'tests' %}
        env:
          COVERAGE_FILE: .coverage.{% raw %}${{ matrix.python-version }}{% endraw +%}
      {% endif %}
      {% endif %}
      {% if job == 'tests' %}
      - name: Upload coverage file
        uses: actions/upload-artifact@v3.1.3
        with:
          name: coverage
          path: .coverage.*
      {% endif %}
  {% endfor %}
  {% if cookiecutter.get("frontend") == "yes" %}
  Frontend:
    uses: ./.github/workflows/frontend.yml
  {% endif %}
  {% if include_exists(".github/workflows/ci.yml") %}
    {{- include(".github/workflows/ci.yml", indent=2) -}}
  {% endif %}
