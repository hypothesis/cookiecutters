{% if cookiecutter._directory == 'pypackage' %}
[build-system]
requires = ["setuptools>=45", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
dynamic = ["version"]
name = "{{ cookiecutter.slug }}"
description = "{{ cookiecutter.short_description }}"
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: BSD License",
    "Intended Audience :: Developers",
]
requires-python = ">={{ python_versions()|oldest|pyformat(PyFormats.MAJOR_DOT_MINOR_FMT) }}"
dependencies = [
  {% if cookiecutter.get("postgres") == "yes" %}
  "sqlalchemy",
  "psycopg2",
  {% endif %}
  {% if include_exists("pyproject.toml/dependencies") %}
    {{- include("pyproject.toml/dependencies", indent=4) -}}
  {% endif %}
]

[project.urls]
Repository = "{{ cookiecutter.__github_url }}"
Issues = "{{ cookiecutter.__github_url }}/issues"
Changelog = "{{ cookiecutter.__github_url }}/releases"

{% if include_exists("pyproject.toml/scripts") %}
[project.scripts]
{{ include("pyproject.toml/scripts") -}}
{% elif cookiecutter.get("console_script") == "yes" %}
[project.scripts]
{{ cookiecutter.__entry_point }} = "{{ cookiecutter.package_name }}.cli:cli"

{% endif %}
[tool.setuptools_scm]

{% endif %}
{% if include_exists("pyproject.toml/tail") %}
{{ include("pyproject.toml/tail") }}
{% endif %}
[tool.pytest.ini_options]
addopts = "-q"
filterwarnings = [
    "error", # Fail the tests if there are any warnings.
    "ignore:^find_module\\(\\) is deprecated and slated for removal in Python 3.12; use find_spec\\(\\) instead$:DeprecationWarning:importlib",
    "ignore:^FileFinder.find_loader\\(\\) is deprecated and slated for removal in Python 3.12; use find_spec\\(\\) instead$:DeprecationWarning:importlib",
    "ignore:^pkg_resources is deprecated as an API:DeprecationWarning:pkg_resources",
    "ignore:^pkg_resources is deprecated as an API:DeprecationWarning:pyramid",
    "ignore:^Deprecated call to .pkg_resources\\.declare_namespace\\('.*'\\).\\.:DeprecationWarning:pkg_resources",
    "ignore:^'cgi' is deprecated and slated for removal in Python 3\\.13$:DeprecationWarning:webob",
    "ignore:^datetime\\.datetime\\.utcnow\\(\\) is deprecated and scheduled for removal in a future version\\.:DeprecationWarning",
    {% if include_exists("pytest/filterwarnings") %}
        {{- include("pytest/filterwarnings", indent=4) -}}
    {% endif %}
]

{% if cookiecutter.get("linter") == "ruff" %}
[tool.ruff]
target-version = "py{{ python_versions()|oldest|pyformat(PyFormats.MAJOR_MINOR_FMT) }}"
{% if include_exists("ruff/top_level/tail") %}
{{ include("ruff/top_level/tail") -}}
{% endif %}

[tool.ruff.lint]
select = ["ALL"]
ignore = [
{% if include_exists("ruff/lint/ignore") %}
{{ include("ruff/lint/ignore", indent=4) -}}
{% else %}
    "UP",    # pyupgrade
    "YTT",   # flake8-2020 (checks for misuse of sys.version or sys.version_info
    "ANN",   # flake8-annotations (checks for absence of type annotations on functions)
    "ASYNC", # flake8-async (checks for asyncio-related problems)
    "S",     # flake8-bandit (checks for security issues)
    "FBT",   # flake8-boolean-trap (checks for the "boolean trap" anti-pattern)
    "B",     # flake8-bugbear (checks for bugs and design problems)
    "A",     # flake8-builtins (checks for builtins being overridden)
    "CPY",   # flake8-copyright (checks for missing copyright notices)
    "C4",    # flake8-comprehensions (helps write better list/set/dict comprehensions)
    "DTZ",   # flake8-datetimez (checks for usages of unsafe naive datetime class)
    "T10",   # flake8-debugger (checks for set traces etc)
    "EM",    # flake8-errmsg (checks for error message formatting issues)
    "EXE",   # flake8-executable (checks for incorrect executable permissions and shebangs)
    "FA",    # flake8-future-annotations (checks for missing from __future__ import annotations)
    "ISC",   # flake8-implicit-str-concat (checks for style problems with string literal concatenation)
    "ICN",   # flake8-import-conventions (checks for unconventional imports and aliases)
    "LOG",   # flake8-logging (checks for issues with using the logging module)
    "G",     # flake8-logging-format (enforce usage of `extra` in logging calls)
    "INP",   # flake8-no-pep420 (checks for missing __init__.py files)
    "PIE",   # flake8-pie (miscellaneous)
    "T20",   # flake8-print (checks for print and pprint statements)
    "PT",    # flake8-pytest-style (checks for common pytest style and consistency issues)
    "RSE",   # flake8-raise (checks for issues with raising exceptions)
    "RET",   # flake8-return (checks for issues with return values)
    "SLOT",  # flake8-slots (requires __slots__ in subclasses of immutable types)
    "SIM",   # flake8-simplify (lots of code simplification checks)
    "TID",   # flake8-tidy-imports (checks for issues with imports)
    "TC",    # flake8-type-checking (checks for type checking imports that aren't in TYPE_CHECKING blocks)
    "ARG",   # flake8-unused-arguments (checks for unused arguments)
    "PTH",   # flake8-use-pathlib (checks for cases with pathlib could be used but isn't)
    "TD",    # flake8-todos (enforces good style for "# TODO" comments)
    "FIX",   # flake8-fixme (checks for FIXMEs, TODOs, HACKs, etc)
    "ERA",   # eradicate (checks for commented-out code)
    "PGH",   # pygrep-hooks (miscellaneous)
    "PL",    # pylint (miscellaneous rules from pylint)
    "TRY",   # tryceratops (various try/except-related checks)
    "FLY",   # flynt (checks for old-style %-formatted strings)
    "PERF",  # perflint (checks for performance anti-patterns)
    "FURB",  # refurb (various "refurbishing and modernizing" checks)
    "DOC",   # pydoclint (docstring checks)
    "RUF",   # Ruff-specific rules
    "COM",   # flake8-commas (we used a code formatter so we don't need a linter to check this)
    "D100","D101","D102","D103","D104","D105","D106","D107", # Missing docstrings.
    "D202", # "No blank lines allowed after function docstring" conflicts with the Ruff code formatter.
    # "Multi-line docstring summary should start at the first line" (D212)
    # and "Multi-line docstring summary should start at the second line" (D213).
    # These two rules conflict with each other so you have to disable one of them.
    # How about we disable them both? PEP 257 says either approach is okay:
    #
    # > The summary line may be on the same line as the opening quotes or on
    # > the next line.
    # >
    # > https://peps.python.org/pep-0257/#multi-line-docstrings
    "D212", "D213",
    "E501", # line-too-long (we use the code formatter so we don't need the linter to check line lengths for us).
    "PLR2004", # "Magic value used in comparison", this mostly triggers false-positives related to HTTP status codes.
    "PLR6301", # Method could be a function/classmethod/static method (doesn't use self)
    "RET501", # Do not explicitly return None if it's the only possible return value.
    "RET504", # Unnecessary assignment before return statement.
{% if include_exists("ruff/lint/ignore/tail") %}
{{ include("ruff/lint/ignore/tail", indent=4) -}}
{% endif %}
{% endif %}
]

[tool.ruff.lint.per-file-ignores]
{% if include_exists("ruff/lint/per_file_ignores") %}
{{ include("ruff/lint/per_file_ignores") -}}
{% else %}
"tests/*" = [
    # Just disable name style checking for the tests, because we
    # frequently use lots of argument names that don't conform.
    # For example we frequently create pytest fixtures that aren't named in
    # snake_case, such as a fixture that returns a mock of the FooBar class would
    # be named FooBar in CamelCase.
    "N",
    "PLR0913", # Too many arguments. Tests often have lots of arguments.
    "PLR0917", # Too many positional arguments. Tests often have lots of arguments.
    "PLR0904", # Too many public methods. Test classes often have lots of test methods.
]
"__init__.py" = [
    "F401", # Ignore unused import errors on __init__ files to avoid having to add either a noqa stament or an __all__ declaration.
]
{% if include_exists("ruff/lint/per_file_ignores/tail") %}
{{ include("ruff/lint/per_file_ignores/tail") -}}
{% endif %}
{% endif %}
{% if include_exists("ruff/tail") %}

{{ include("ruff/tail") -}}
{% endif %}
{% else %}
[tool.pydocstyle]
ignore = [
    # Missing docstrings.
    "D100","D101","D102","D103","D104","D105","D106","D107",

    # "No blank lines allowed after function docstring" conflicts with the
    # Black code formatter which insists on inserting blank lines after
    # function docstrings.
    "D202",

    # "1 blank line required before class docstring" conflicts with another
    # pydocstyle rule D211 "No blank lines allowed before class docstring".
    "D203",

    # "Multi-line docstring summary should start at the first line"
    # and "Multi-line docstring summary should start at the second line".
    # These two rules conflict with each other so you have to disable one of them.
    # How about we disable them both? PEP 257 says either approach is okay:
    #
    # > The summary line may be on the same line as the opening quotes or on
    # > the next line.
    # >
    # > https://peps.python.org/pep-0257/#multi-line-docstrings
    "D212",
    "D213",
{% if include_exists("pydocstyle/ignores") %}

{{ include("pydocstyle/ignores", indent=4) -}}
{% endif %}
]
{% endif %}

[tool.coverage.run]
branch = true
parallel = true
source = ["{{ cookiecutter.package_name }}", "tests/unit"]
omit = [
    "*/{{ cookiecutter.package_name }}/__main__.py",
    {% if cookiecutter.get("_directory") == "pyapp" %}
    "*/{{ cookiecutter.package_name }}/app.py",
    {% endif %}
    {% if cookiecutter.get("_directory") == "pyramid-app" and cookiecutter.get("postgres") == "yes" %}
    "*/{{ cookiecutter.package_name }}/scripts/init_db.py",
    {% endif %}
    {% if include_exists("coverage/omit") %}
        {{- include("coverage/omit", indent=4) -}}
    {% endif %}
]

[tool.coverage.paths]
source = ["src", ".tox/*tests/lib/python*/site-packages"]

[tool.coverage.report]
show_missing = true
precision = 2
fail_under = 100.00
skip_covered = true
exclude_also = [
{% if include_exists("coverage/exclude_also") %}
    {{- include("coverage/exclude_also", indent=4) -}}
{% else %}
    # `if TYPE_CHECKING:` blocks are only executed while running mypy.
    "if TYPE_CHECKING:",
{% if include_exists("coverage/exclude_also/tail") %}
    {{- include("coverage/exclude_also/tail", indent=4) -}}
{% endif %}
{% endif %}
]

{% if cookiecutter.get("linter") != "ruff" %}
[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88
default_section = "THIRDPARTY"
known_first_party = ["{{ cookiecutter.package_name }}", "tests"]

[tool.pylint.main]
jobs = 0 # Use one process for CPU.

load-plugins = [
    "pylint.extensions.bad_builtin",
    "pylint.extensions.check_elif",
    "pylint.extensions.docparams",
    "pylint.extensions.mccabe",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.redefined_variable_type",
    {% if include_exists("pylint/plugins") %}
        {{- include("pylint/plugins", indent=4) -}}
    {% endif %}
]

# Fail if there are *any* messages from PyLint.
# The letters refer to PyLint's message categories, see
# https://pylint.pycqa.org/en/latest/messages/messages_introduction.html
fail-on = ["C", "E", "F", "I", "R", "W"]

[tool.pylint.messages_control]
ignore-paths=[
{% if include_exists("pylint/ignore-paths") %}
    {{- include("pylint/ignore-paths", indent=4) -}}
{% endif %}
]
enable = [
    "bad-inline-option",
    "deprecated-pragma",
    "useless-suppression",
    "use-symbolic-message-instead",
    "use-implicit-booleaness-not-comparison-to-zero",
    "use-implicit-booleaness-not-comparison-to-string",
    {% if include_exists("pylint/enables") %}
        {{- include("pylint/enables", indent=4) -}}
    {% endif %}
]
disable = [
    # Docstrings are encouraged but we don't want to enforce that everything
    # must have a docstring.
    "missing-docstring",

    # We don't always want to have to put a `:return:` in a docstring.
    "missing-return-doc",

    # We don't always want to have to put an `:rtype:` in a docstring.
    "missing-return-type-doc",

    # We don't want to have to document the type of every parameter with a
    # `:type:` in the docstring.
    "missing-type-doc",

    # We use isort to sort and group our imports, so we don't need PyLint to
    # check them for us.
    "ungrouped-imports",

    # We use Black to format our code automatically, so we don't need PyLint to
    # check formatting for us.
    "line-too-long",

    # We use isort to sort out imports so we don't need PyLint to check import
    # ordering for us.
    "wrong-import-order",

    "too-few-public-methods",

    # Issues to disable this for false positives, disabling it globally in the meantime https://github.com/PyCQA/pylint/issues/214
    "duplicate-code",
{% if include_exists("pylint/disables") %}

{{ include("pylint/disables", indent=4) -}}
{% endif %}
]

good-names = [
    "i", "j", "k", "ex", "Run", "_", # PyLint's default good names.
    "tm", "db", "ai",
    {% if include_exists("pylint/good_names") %}
        {{- include("pylint/good_names", indent=4) -}}
    {% endif %}
]

[tool.pylint.reports]
output-format = "colorized"
score = "no"
{% endif %}

[tool.mypy]
allow_untyped_globals = true
error_summary = false
pretty = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true

disable_error_code = [
    # https://mypy.readthedocs.io/en/stable/error_code_list.html#code-import-untyped
    "import-untyped",
    {% if include_exists("mypy/disables") %}
        {{- include("mypy/disables", indent=4) -}}
    {% endif %}
]
{% if include_exists("mypy/exclude") %}

exclude = [
{{ include("mypy/exclude", indent=4) -}}
]
{% elif include_exists("mypy/exclude/tail") %}

exclude = [
{{ include("mypy/exclude/tail", indent=4) -}}
]
{% endif %}

[[tool.mypy.overrides]]
module = [
{% if include_exists("mypy/ignore_errors_modules") %}
    {{- include("mypy/ignore_errors_modules", indent=2) -}}
{% else %}
  # Don't try to typecheck the tests for now.
  "tests.*",
{% endif %}
{% if include_exists("mypy/ignore_errors_modules/tail") %}
   {{- include("mypy/ignore_errors_modules/tail", indent=2) -}}
{% endif %}
]
ignore_errors = true
{% if include_exists("pyproject.toml") %}

{{ include("pyproject.toml") -}}
{% endif %}
