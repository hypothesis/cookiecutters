[tox]
envlist = tests
{% if cookiecutter._directory in ['pyapp', 'pyramid-app'] %}
skipsdist = true
{% endif %}
requires =
    tox>=3.25.0,<4
    tox-envfile
    tox-faster
    tox-run-command
    {% if cookiecutter._directory == 'pypackage' %}
    tox-recreate
    {% endif %}
{% if cookiecutter._directory == 'pypackage' %}
isolated_build = true
{% endif %}

[testenv]
{% if cookiecutter._directory in ['pyapp', 'pyramid-app'] %}
skip_install = true
{% else %}
skip_install =
    format,checkformatting,coverage,template: true
{% endif %}
setenv =
    PYTHONUNBUFFERED = 1
    OBJC_DISABLE_INITIALIZE_FORK_SAFETY = YES
    dev: DEV = {env:DEV:true}
    dev: SENTRY_ENVIRONMENT = {env:SENTRY_ENVIRONMENT:dev}
    dev: NEW_RELIC_APP_NAME = {env:NEW_RELIC_APP_NAME:{{ cookiecutter.slug }}}
    dev: NEW_RELIC_ENVIRONMENT = {env:NEW_RELIC_ENVIRONMENT:dev}
    tests: PYTEST_PLUGINS = {{ pytest_plugins("unit")|separator(",") }}
    functests: PYTEST_PLUGINS = {{ pytest_plugins("functional")|separator(",") }}
{% if cookiecutter.get("postgres") == "yes" %}
    SQLALCHEMY_SILENCE_UBER_WARNING=1
    dev: DATABASE_URL = {env:DATABASE_URL:postgresql://postgres@localhost:{{ cookiecutter['__postgres_port'] }}/postgres}
    tests: DATABASE_URL = {env:DATABASE_URL:postgresql://postgres@localhost:{{ cookiecutter['__postgres_port'] }}/{{ cookiecutter.package_name }}_tests}
    functests: DATABASE_URL = {env:DATABASE_URL:postgresql://postgres@localhost:{{ cookiecutter['__postgres_port'] }}/{{ cookiecutter.package_name }}_functests}
{% endif %}
{% if cookiecutter._directory in ['pyapp', 'pyramid-app'] %}
    # Make `import {{ cookiecutter.package_name }}` work in `make shell`.
    dev: PYTHONPATH = .
{% endif %}
{% if cookiecutter._directory in ['pyramid-app'] %}
    dev: WEB_CONCURRENCY = {env:WEB_CONCURRENCY:2}
{% endif %}
    {% if include_exists("tox/setenv") %}
        {{- include("tox/setenv", indent=4) -}}
    {% endif %}
passenv =
    HOME
    PYTEST_ADDOPTS
    dev: DEBUG
    dev: SENTRY_DSN
    dev: NEW_RELIC_LICENSE_KEY
{% if cookiecutter._directory in ['pyapp', 'pyramid-app'] %}
    GUNICORN_CERTFILE
    GUNICORN_KEYFILE
{% endif %}
    {% if include_exists("tox/passenv") %}
        {{- include("tox/passenv", indent=4) -}}
    {% endif %}
deps =
{% if cookiecutter._directory in ['pyapp', 'pyramid-app'] %}
    pip-tools
    pip-sync-faster
{% elif cookiecutter._directory == 'pypackage' %}
    dev: ipython
    format,checkformatting: black
    format,checkformatting: isort
    lint: toml
    lint: pylint
    lint: pydocstyle
    lint: pycodestyle
    lint,tests: pytest-mock
    lint,tests,coverage: coverage[toml]
    lint,tests,functests: pytest
    lint,tests,functests: factory-boy
    lint,tests,functests: h-matchers
    lint,template: cookiecutter
{% endif %}
    {% if include_exists("tox/deps") %}
        {{- include("tox/deps", indent=4) -}}
    {% endif %}
depends =
{% if cookiecutter._directory in ['pyapp', 'pyramid-app'] %}
    coverage: tests
{% else %}
    coverage: tests,py{{ "{" }}{{ python_versions()|rest|pyformat(PyFormats.MAJOR_MINOR_FMT)|separator(",") }}{{ "}" }}-tests
{% endif %}
{% if cookiecutter.get("postgres") == "yes" or include_exists("tox/allowlist_externals") %}
allowlist_externals =
{% if cookiecutter.get("postgres") == "yes" %}
    tests,functests: sh
{% endif %}
{% if include_exists("tox/allowlist_externals") %}
    {{- include("tox/allowlist_externals", indent=4) -}}
{% endif %}
{% endif %}
{% if cookiecutter._directory in ['pyapp', 'pyramid-app'] or include_exists("tox/commands_pre") %}
commands_pre =
    {% if cookiecutter._directory in ['pyapp', 'pyramid-app'] %}
    pip-sync-faster requirements/{env:TOX_ENV_NAME}.txt --pip-args '--disable-pip-version-check'
    {% endif %}
    {% if include_exists("tox/commands_pre") %}
        {{- include("tox/commands_pre", indent=4) -}}
    {% endif %}
{% endif %}
commands =
{% if cookiecutter.get("postgres") == "yes" %}
    tests: sh bin/create-db {{ cookiecutter.package_name }}_tests
    functests: sh bin/create-db {{ cookiecutter.package_name }}_functests
{% endif %}
{% if cookiecutter._directory in ['pyapp', 'pyramid-app'] %}
    dev: {posargs:supervisord -c conf/supervisord-dev.conf}
    format: black {{ cookiecutter.package_name }} tests bin
    format: isort --atomic {{ cookiecutter.package_name }} tests bin
    checkformatting: black --check {{ cookiecutter.package_name }} tests bin
    checkformatting: isort --quiet --check-only {{ cookiecutter.package_name }} tests bin
    lint: pylint {{ cookiecutter.package_name }} bin
    lint: pylint --rcfile=tests/pyproject.toml tests
    lint: pydocstyle {{ cookiecutter.package_name }} tests bin
    lint: pycodestyle {{ cookiecutter.package_name }} tests bin
{% else %}
    dev: {posargs:ipython --classic --no-banner --no-confirm-exit}
    format: black src tests bin
    format: isort --atomic src tests bin
    checkformatting: black --check src tests bin
    checkformatting: isort --quiet --check-only src tests bin
    lint: pylint src bin
    lint: pylint --rcfile=tests/pyproject.toml tests
    lint: pydocstyle src tests bin
    lint: pycodestyle src tests bin
{% endif %}
    tests: coverage run -m pytest --failed-first --new-first --no-header --quiet {posargs:tests/unit/}
    functests: python -m pytest --failed-first --new-first --no-header --quiet {posargs:tests/functional/}
    coverage: -coverage combine
    coverage: coverage report
    template: python3 bin/make_template {posargs}
    {% if include_exists("tox/commands") %}
        {{- include("tox/commands", indent=4) -}}
    {% endif %}
{% if cookiecutter._directory in ['pyapp', 'pyramid-app'] %}

[testenv:dev]
# By default when you Ctrl-c the `make dev` command tox is too aggressive about
# killing supervisor. tox kills supervisor before supervisor has had time to
# stop or kill its child processes, resulting in detached child processes being
# left running and other problems.
#
# Fix this by configuring tox to wait a long time before sending any further
# SIGINTs (after the first one) or SIGTERMs or SIGKILLs to supervisor.
# Just trust supervisor to clean up all its child processes and stop.
suicide_timeout = 60.0
interrupt_timeout = 60.0
terminate_timeout = 60.0
{% endif %}
